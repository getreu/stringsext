trigger:
  branches:
    include: ['*']
  tags:
    include: ['*']

stages:
  - stage: Tests
    jobs:
      - job:
        strategy:
          matrix:
            windows-stable:
              imageName: 'windows-2019'
              rustup_toolchain: stable
            mac-stable:
              imageName: 'macOS-10.15'
              rustup_toolchain: stable
            linux-stable:
              imageName: 'ubuntu-18.04'
              rustup_toolchain: stable
        pool:
          vmImage: $(imageName)
        steps:
          - script: |
              curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
              echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
            displayName: Install rust
            condition: ne( variables['Agent.OS'], 'Windows_NT' )
          - script: |
                curl -sSf -o rustup-init.exe https://win.rustup.rs
                rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN% --default-host x86_64-pc-windows-msvc
                echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
            displayName: Windows install rust
            condition: eq( variables['Agent.OS'], 'Windows_NT' )
          - script: cargo build --all
            displayName: Cargo build
          - script: cargo test --all
            displayName: Cargo test


  - stage: Release
    dependsOn: Tests
    condition: startsWith(variables['Build.SourceBranch'], 'refs/tags/')
    jobs:
      - job:
        strategy:
          matrix:
            windows-stable:
              imageName: 'windows-2019'
              rustup_toolchain: stable
              target: 'x86_64-pc-windows-msvc'
            mac-stable:
              imageName: 'macOS-10.15'
              rustup_toolchain: stable
              target: 'x86_64-apple-darwin'
            linux-stable:
              imageName: 'ubuntu-18.04'
              rustup_toolchain: stable
              target: 'x86_64-unknown-linux-gnu'
        pool:
          vmImage: $(imageName)
        steps:
          - script: |
              curl https://sh.rustup.rs -sSf | sh -s -- -y --default-toolchain $RUSTUP_TOOLCHAIN
              echo "##vso[task.setvariable variable=PATH;]$PATH:$HOME/.cargo/bin"
            displayName: Install rust
            condition: ne( variables['Agent.OS'], 'Windows_NT' )
          - script: |
              cargo install cargo-deb         
            condition: eq( variables['Agent.OS'], 'Linux' )
            displayName: Install build dependencies 
          - script: |
              set CARGO_HOME=%USERPROFILE%\.cargo
              curl -sSf -o rustup-init.exe https://win.rustup.rs
              rustup-init.exe -y --default-toolchain %RUSTUP_TOOLCHAIN% --default-host x86_64-pc-windows-msvc
              set PATH=%PATH%;%USERPROFILE%\.cargo\bin
              echo "##vso[task.setvariable variable=PATH;]%PATH%;%USERPROFILE%\.cargo\bin"
            displayName: Windows install rust
            condition: eq( variables['Agent.OS'], 'Windows_NT' )
          - script: |
              rustup target add $TARGET
              cargo build --release --target $TARGET
              strip '$(Build.SourcesDirectory)/target/$(TARGET)/release/stringsext'
            condition: ne( variables['Agent.OS'], 'Windows_NT' )
            displayName: Build
          - script: |
              sudo apt-get install pandoc docbook5-xml docbook-xsl-ns xsltproc fop xmlto libxml2-utils xmlstarlet
              cd '$(Build.SourcesDirectory)/doc/'
              './make--all'
            condition: eq( variables['Agent.OS'], 'Linux' )
            displayName: Build documentation
          - script: |
              cargo deb --target $TARGET
            condition: eq( variables['Agent.OS'], 'Linux' )
            displayName: Build deb package
          - script: |
              rustup target add %TARGET%
              cargo build --release --target %TARGET%
            condition: eq( variables['Agent.OS'], 'Windows_NT' )
            displayName: Build on Windows
          - task: CopyFiles@2
            displayName: Copy documentation assets
            condition: eq( variables['Agent.OS'], 'Linux' )
            inputs:
              sourceFolder: '$(Build.SourcesDirectory)/doc/build/pdf'
              contents: '*.pdf'
              targetFolder: '$(Build.ArtifactStagingDirectory)/'
          - task: CopyFiles@2
            displayName: Copy assets
            condition: ne( variables['Agent.OS'], 'Windows_NT' )
            inputs:
              sourceFolder: '$(Build.SourcesDirectory)/target/$(TARGET)/release'
              contents: stringsext
              targetFolder: '$(Build.BinariesDirectory)/'
          - task: CopyFiles@2
            displayName: Copy deb package
            condition: eq( variables['Agent.OS'], 'Linux' )
            inputs:
              sourceFolder: '$(Build.SourcesDirectory)/target/$(TARGET)/debian'
              contents: '*.deb'
              targetFolder: '$(Build.ArtifactStagingDirectory)/'
          - task: CopyFiles@2
            displayName: Copy assets on Windows
            condition: eq( variables['Agent.OS'], 'Windows_NT' )
            inputs:
              sourceFolder: '$(Build.SourcesDirectory)/target/$(TARGET)/release'
              contents: stringsext.exe
              targetFolder: '$(Build.BinariesDirectory)/'

          - task: ArchiveFiles@2
            displayName: Gather assets
            condition: ne( variables['Agent.OS'], 'Windows_NT' )
            inputs:
              rootFolderOrFile: '$(Build.BinariesDirectory)/stringsext'
              archiveType: 'tar'
              tarCompression: 'gz'
              archiveFile: '$(Build.ArtifactStagingDirectory)/stringsext-$(Build.SourceBranchName)-$(TARGET).tar.gz'
          - task: ArchiveFiles@2
            displayName: Gather assets
            condition: eq( variables['Agent.OS'], 'Windows_NT' )
            inputs:
              rootFolderOrFile: '$(Build.BinariesDirectory)/stringsext.exe'
              archiveType: 'zip'
              archiveFile: '$(Build.ArtifactStagingDirectory)/stringsext-$(Build.SourceBranchName)-$(TARGET).zip'

          - task: GithubRelease@0
            condition: eq( variables['Agent.OS'], 'Linux' )
            inputs:
              gitHubConnection: 'github.com_getreu'
              repositoryName: 'getreu/stringsext'
              action: 'edit'
              target: '$(build.sourceVersion)'
              tagSource: 'manual'
              tag: '$(Build.SourceBranchName)'
              assets: '$(Build.ArtifactStagingDirectory)/*'
              title: '$(Build.SourceBranchName)'
              assetUploadMode: 'replace'
              addChangeLog: false
          - task: GithubRelease@0
            condition: eq( variables['Agent.OS'], 'Darwin' )
            inputs:
              gitHubConnection: 'github.com_getreu'
              repositoryName: 'getreu/stringsext'
              action: 'edit'
              target: '$(build.sourceVersion)'
              tagSource: 'manual'
              tag: '$(Build.SourceBranchName)'
              assets: '$(Build.ArtifactStagingDirectory)/stringsext-$(Build.SourceBranchName)-$(TARGET).tar.gz'
              title: '$(Build.SourceBranchName)'
              assetUploadMode: 'replace'
              addChangeLog: false
          - task: GithubRelease@0
            condition: eq( variables['Agent.OS'], 'Windows_NT' )
            inputs:
              gitHubConnection: 'github.com_getreu'
              repositoryName: 'getreu/stringsext'
              action: 'edit'
              target: '$(build.sourceVersion)'
              tagSource: 'manual'
              tag: '$(Build.SourceBranchName)'
              assets: '$(Build.ArtifactStagingDirectory)/stringsext-$(Build.SourceBranchName)-$(TARGET).zip'
              title: '$(Build.SourceBranchName)'
              assetUploadMode: 'replace'
              addChangeLog: false
